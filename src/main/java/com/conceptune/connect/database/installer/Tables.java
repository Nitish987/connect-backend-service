package com.conceptune.connect.database.installer;

import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Log4j2
@Component
public class Tables {

    @Autowired
    private JdbcTemplate template;

    /**
     * Creates user table
     * @throws DataAccessException if table creation fails
     */
    private void createUserTable() throws DataAccessException {
        template.execute("CREATE TABLE IF NOT EXISTS ct_user (" +
                "id varchar(36) NOT NULL," + // for user id
                "name varchar(50) NOT NULL," +
                "username varchar(50) UNIQUE NOT NULL," +
                "phone varchar(20) UNIQUE NOT NULL," +
                "hash text UNIQUE NOT NULL," +
                "photo text DEFAULT NULL," +
                "email varchar(100) DEFAULT NULL," +
                "pin text DEFAULT NULL," +
                "country varchar(50) NOT NULL," +
                "country_code varchar(10) NOT NULL," +
                "title varchar(150) NOT NULL," +
                "is_active bool DEFAULT FALSE NOT NULL," + // for account active state
                "mfa_status varchar(50) NOT NULL," + // for multi-factor authentication
                "created_at timestamptz NOT NULL," +
                "updated_at timestamptz NOT NULL," +
                "PRIMARY KEY (id)" +
                ");"
        );
        template.execute("CREATE INDEX IF NOT EXISTS ct_user__phone__index ON ct_user USING btree (phone);");
        template.execute("CREATE INDEX IF NOT EXISTS ct_user__hash__index ON ct_user USING btree (hash);");
        template.execute("CREATE INDEX IF NOT EXISTS ct_user__username__index ON ct_user USING btree (username);");
    }

    /**
     * Creates encryption key table
     * @throws DataAccessException if table creation fails
     */
    private void createEncryptionKeyTable() throws DataAccessException {
        template.execute("CREATE TABLE IF NOT EXISTS ct_encryption_key (" +
                "id int8 GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE ) NOT NULL," +
                "user_id varchar(36) UNIQUE NOT NULL," +
                "secret_key text NOT NULL," +
                "private_key text NOT NULL," +
                "public_key text NOT NULL," +
                "created_at timestamptz NOT NULL," +
                "PRIMARY KEY (id)" +
                ");"
        );
        template.execute("CREATE INDEX IF NOT EXISTS ct_encryption_key__user_id__index ON ct_encryption_key USING btree (user_id);");
    }

    /**
     * Creates message token table
     * @throws DataAccessException if table creation fails
     */
    private void createMessageTokenTable() throws DataAccessException {
        template.execute("CREATE TABLE IF NOT EXISTS ct_message_token (" +
                "id int8 GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE ) NOT NULL," +
                "user_id varchar(36) NOT NULL," +
                "token text NOT NULL," + // for firebase cloud message token
                "created_at timestamptz NOT NULL," +
                "PRIMARY KEY (id)" +
                ");"
        );
        template.execute("CREATE INDEX IF NOT EXISTS ct_message_token__user_id__index ON ct_message_token USING btree (user_id);");
    }

    /**
     * Creates login state table
     * @throws DataAccessException if table creation fails
     */
    private void createLoginStateTable() throws DataAccessException {
        template.execute("CREATE TABLE IF NOT EXISTS ct_login_state (" +
                "id varchar(36) NOT NULL," + // for session id
                "user_id varchar(36) NOT NULL," +
                "token text NOT NULL," + // for session token
                "created_at timestamptz NOT NULL," +
                "PRIMARY KEY (id)" +
                ");"
        );
        template.execute("CREATE INDEX IF NOT EXISTS ct_login_state__user_id__index ON ct_login_state USING btree (user_id);");
    }

    /**
     * Create Signal Registration table
     * @throws DataAccessException if table creation fails
     */
    private void createSignalDeviceTable() throws DataAccessException {
        template.execute("CREATE TABLE IF NOT EXISTS ct_signal_device (" +
                "id int8 NOT NULL," + // device id
                "user_id varchar(36) UNIQUE NOT NULL," + // user id
                "registration_id int8 UNIQUE NOT NULL," + // device registration id
                "signed_pre_key text NOT NULL," + // signed pre-key public key
                "signature text NOT NULL," + // signed signature
                "identity_key text NOT NULL," + // identity key public key
                "pre_key_count int DEFAULT 0 NOT NULL," + // pre-key count
                "refresh_at timestamptz NOT NULL," +
                "updated_at timestamptz NOT NULL," +
                "created_at timestamptz NOT NULL," +
                "PRIMARY KEY (id)" +
                ");"
        );
        template.execute("CREATE INDEX IF NOT EXISTS ct_signal_device__user_id__index ON ct_signal_device USING btree (user_id);");
        template.execute("CREATE INDEX IF NOT EXISTS ct_signal_device__registration_id__index ON ct_signal_device USING btree (registration_id);");
    }

    /**
     * Create Signal Pre key table
     * @throws DataAccessException if table creation fails
     */
    private void createSignalPreKeyTable() throws DataAccessException {
        template.execute("CREATE TABLE IF NOT EXISTS ct_signal_pre_keys (" +
                "id int8 GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE ) NOT NULL," +
                "user_id varchar(36) NOT NULL," +
                "signal_device_id int8 NOT NULL," + // signal device id
                "key_id int8 NOT NULL," + // pre-key id
                "pre_key text NOT NULL," + // pre-key public key
                "created_at timestamptz NOT NULL," +
                "PRIMARY KEY (id)" +
                ");"
        );
        template.execute("CREATE INDEX IF NOT EXISTS ct_signal_pre_keys__user_id__index ON ct_signal_pre_keys USING btree (user_id);");
    }

    /**
     * Create Story Table
     * @throws DataAccessException if table creation fails
     */
    private void createStoryTable() throws DataAccessException {
        template.execute("CREATE TABLE IF NOT EXISTS ct_stories (" +
                "id int8 GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE ) NOT NULL," +
                "user_id varchar(36) NOT NULL," +
                "type varchar(10) NOT NULL," +
                "content text NOT NULL," +
                "created_at timestamptz NOT NULL," +
                "PRIMARY KEY (id)" +
                ");"
        );
        template.execute("CREATE INDEX IF NOT EXISTS ct_stories__user_id__index ON ct_stories USING btree (user_id);");
    }

    /**
     * Creates Group Table
     * @throws DataAccessException if table creation fails
     */
    private void createGroupTable() throws DataAccessException {
        template.execute("CREATE TABLE IF NOT EXISTS ct_groups (" +
                "id varchar(36) NOT NULL," +
                "name varchar(100) NOT NULL," +
                "photo text DEFAULT NULL," +
                "description varchar(2048) NOT NULL," +
                "member_count int DEFAULT 0 NOT NULL," +
                "created_at timestamptz NOT NULL," +
                "updated_at timestamptz NOT NULL," +
                "PRIMARY KEY (id)" +
                ");"
        );

        template.execute("CREATE TABLE IF NOT EXISTS ct_group_members (" +
                "id int8 GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE ) NOT NULL," +
                "user_id varchar(36) NOT NULL," +
                "group_id varchar(36) NOT NULL," +
                "role varchar(10) NOT NULL," +
                "joined_at timestamptz NOT NULL," +
                "PRIMARY KEY (id)" +
                ");"
        );
        template.execute("CREATE INDEX IF NOT EXISTS ct_group_members__user_id__index ON ct_group_members USING btree (user_id);");

        template.execute("CREATE TABLE IF NOT EXISTS ct_group_members_cache (" +
                "id int8 GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE ) NOT NULL," +
                "group_id varchar(36) UNIQUE NOT NULL," +
                "members text[] NOT NULL," +
                "PRIMARY KEY (id)" +
                ");"
        );
        template.execute("CREATE INDEX IF NOT EXISTS ct_group_members_cache__group_id__index ON ct_group_members_cache USING btree (group_id);");
    }

    /**
     * Creates all the tables if not exists in database
     */
    public void createIfNotExists() {
        try {
            log.info("Creating tables if not exists...");

            createUserTable();
            createEncryptionKeyTable();
            createMessageTokenTable();
            createLoginStateTable();
            createSignalDeviceTable();
            createSignalPreKeyTable();
            createStoryTable();
            createGroupTable();

            log.info("Table creation status ok!");
        } catch (Exception e) {
            log.error("Error creating table: {}", e.getMessage());
        }
    }
}
